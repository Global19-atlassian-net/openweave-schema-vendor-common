/*
 *
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2018 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file defines the User NFC Token Access trait.
 *
 */

syntax = "proto3";

package weave.trait.security;

import "google/protobuf/timestamp.proto";
import "wdl/wdl_options.proto";

option java_outer_classname = "WeaveInternalTamperTrait";
option objc_class_prefix = "SCM";

/**
 * Describes whether a device has been tampered with
 */
message TamperTrait {
  option (wdl.message_type) = TRAIT;
  option (wdl.trait) = {
    stability: PROD,
    id: 0x0E07,
    vendor_id: 0x0000,
    version: 2
  };

  enum TamperState {
    /// Reserved for internal use; please do not use.
    TAMPER_STATE_UNSPECIFIED = 0;

    TAMPER_STATE_CLEAR = 1;

    TAMPER_STATE_TAMPERED = 2;

    /// State unknown or not applicable
    TAMPER_STATE_UNKNOWN = 3;
  }

  // ----------- PROPERTIES ----------- //
  /**
   * Whether the device has been tampered with since last reset, this
   * shall remain true until a reset is requested
   */
  TamperState tamper_state = 1;

  // *** Deprecated (updated the timestamp constraints to emit a 64-bit millis instead of 32-bit seconds).
  // *** Please use the updated field below
  google.protobuf.Timestamp first_observed_at = 2 [(wdl.prop) = {timestamp_constraints: {signed: false,
                                                                              precision: 1, width: 32},
                                                                nullable: true,
                                                                optional: true},
                                                   (wdl.caspian_options) = {ignore: true},
                                                   deprecated = true];

  /**
   * The time when the current state of this set of properties was first
   * observed.
   *
   * This value can be set/updated due to the property state changing
   * or to an initial observation of the current state.
   *
   * This will match an event's timestamp during normal operation but will
   * reflect the initialization time when carrying the initial state.
   *
   * Producers may choose to not implement this (hence optional: true) and
   * consumers must handle that.
   *
   * Producers that are only temporarily not able to set this value may set
   * it to null and consumers must also handle that.
   */
  google.protobuf.Timestamp first_observed_at_ms = 3 [(wdl.prop) = {timestamp_constraints: {signed: true,
                                                                              precision: 0.001, width: 64},
                                                                   nullable: true,
                                                                   optional: true,
                                                                   ephemeral: true}];

  // ----------- COMMANDS ----------- //
  /// Reset the tampering
  message ResetTamperRequest {
    option (wdl.message_type) = COMMAND;
    option (wdl.command) = {
      id: 0x01
    };
  }

  // ----------- EVENTS -------------- //
  /// Emitted whenever the tamper state changes
  message TamperStateChangeEvent {
    option (wdl.message_type) = EVENT;
    option (wdl.event) = {
        id: 1,
        event_importance: EVENT_IMPORTANCE_PRODUCTION_CRITICAL
    };

    TamperState tamper_state = 1;

    /**
     * Adding this field comes with the new requirment that devices emit events
     * upon boot (e.g. _UNKNOWN->_CLEAR). This is a semantic change and thus
     * would be a breaking change. In this particular case we're not
     * making this a breaking change. This was decided after careful
     * consideration & analysis of all direct consumers of this event; all of
     * which already use this event interchangeably with the property which does
     * contain the 'upon boot' behavior.
     */
    TamperState prior_tamper_state = 2 [(wdl.param) = {compatibility: {min_version: 2}}];
  }

}
