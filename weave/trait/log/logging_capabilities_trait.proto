/*
 *
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2018 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file specifies a Weave Common trait that defines the
 *      compile-time, static capabilities of event loggging for a
 *      resource.
 *
 */

syntax = "proto3";
package weave.trait.log;

import "wdl/wdl_options.proto";

option java_outer_classname = "WeaveInternalLoggingCapabilitiesTrait";
option objc_class_prefix = "SCM";

message LoggingCapabilitiesTrait {
    option (wdl.message_type) = TRAIT;
    option (wdl.trait) = {
      stability: ALPHA,
      id: 0x0A02,
      vendor_id: 0x0000,
      version: 1
    };

    enum LogTransport {
        LOG_TRANSPORT_UNSPECIFIED = 0;
        LOG_TRANSPORT_BDX   = 1;
        LOG_TRANSPORT_HTTP  = 2;
        LOG_TRANSPORT_HTTPS = 3;
    }

    // ----------- PROPERTIES ----------- //
    option (wdl.properties) = {
        variability:      STATIC,
        writable:         READ_ONLY,
    };

    /// Supported log transport mechanisms
    repeated LogTransport supported_log_transports = 1;
    
    /// Does the device support streaming log information.
    bool supports_streaming = 3;

    /// Does the device have a non-volatile storage 
    bool supports_nonvolatile_storage = 4;

    /// Does the device support per-trait verbosity
    bool supports_per_trait_verbosity = 5;

    /// Expected logging volume at the default level, in kB/day
    uint32 logging_volume = 6;

    // Maximum buffering capacity, in kB
    uint32 log_buffering_capacity = 7;
}
