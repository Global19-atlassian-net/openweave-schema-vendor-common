/*
 *
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2018 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file specifies a Weave Common trait that expresses the
 *      run-time, dynamic settings that influence the behavior of a
 *      low power or power-constrained "heartbeat" (that is, liveness)
 *      message.
 *
 */

syntax = "proto3";
package weave.trait.heartbeat;

import "wdl/wdl_options.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

option java_outer_classname = "WeaveInternalLowPowerHeartbeatSettingsTrait";
option objc_class_prefix = "SCM";

/**
 * LowPowerHeartbeatSettings trait
 * Expresses expected behavior for a low power heartbeat message
 * Properties:
 *     destination
 *     interval
 *     offset
 *     window
 * 
 * The properties express where to send the message, how often, and what's
 * acceptable for variance in timing of the heartbeat message
 *
 *   destination  this field will contain one of the following:
 *                 - NULL when you don't want to define a target address
 *                 - NodeID for the destination of low power heartbeat messages
 *   interval     the time between heartbeat messages.
 *   offset       the time delta from heartbeat interval
 *                timing to start of heartbeat window.  
 *   window       the time window around heartbeat_offset
 *                that the message can be sent within.
 *
 * There is a variable amount of delay calculated as a random number generated
 * each interval between 0 and window and added to the offset.
 *
 * The heartbeat message is sent 
 *        @ interval + offset + ran(0, window)
 *
 * The heartbeat offset and window are used to align the timing of heartbeat
 *      messages arriving on the observing device to minimize power utilization
 *
 * The offset and window can both be zero and the heartbeat will always be sent
 * at the interval
 */

message LowPowerHeartbeatSettingsTrait {
  option (wdl.message_type) = TRAIT;
  option (wdl.trait) = {
    stability: ALPHA,
    id: 0x0013,
    vendor_id: 0x0000,
    version: 1
  };

  // ----------- PROPERTIES ----------- //
  option (wdl.properties) = {
    writable: READ_ONLY,
    extendable: true,
    reserved_tag_min: 1,
    reserved_tag_max: 31
  };

  /// Heartbeat destination node address
  google.protobuf.UInt64Value destination = 1 [(wdl.prop) = {nullable: true}];

  /// Heartbeat window for when the heartbeat can be sent
  google.protobuf.Duration window = 2 [(wdl.prop) = {duration_constraints: {signed: false, precision: 0.001,
                                                                            width: 32}}];

  /// Heartbeat offset from interval to start of message window
  google.protobuf.Duration offset = 3 [(wdl.prop) = {duration_constraints: {signed: false, precision: 0.001,
                                                                            width: 32}}];

  /// Heartbeat interval for when this device will communicate to its parent
  google.protobuf.Duration interval = 4 [(wdl.prop) = {duration_constraints: {signed: false, precision: 0.001,
                                                                              width: 32}}];

}
