/*
 *
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2018 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file specifies a Weave Common trait that generalizes how
 *      any Weave device resource presents dynamic, read-only power
 *      source information common to any such device.
 *
 */

syntax = "proto3";

package weave.trait.power;

import "wdl/wdl_options.proto";

import "weave/trait/power/power_source_capabilities_trait.proto";

import "google/protobuf/wrappers.proto";

option java_outer_classname = "WeaveInternalPowerSourceTrait";
option objc_class_prefix = "SCM";

/**
 *  @brief
 *    Power Source
 *
 *  A Weave Common trait that allows vendors to enumerate dynamic, read-only
 *  basic properties about a power source in a device resource.
 *
 */
message PowerSourceTrait {
        option (wdl.message_type) = TRAIT;

        option (wdl.trait) = {
          stability: PROD,
                vendor_id: 0x0000,
                id:        0x0019,
                version:   1,
                extendable: true,
                reserved_event_tag_min: 1,       ///< required if extendable is true AND you want events to be extended
                reserved_event_tag_max: 10
        };

	/**
	 *  This represents as an enumeration the condition of the power
	 *  source and, in particular, whether it is operating normally and
	 *  requires no intervention or attention or warrants intervention or
	 *  attention.
	 */
	enum PowerSourceCondition {
		option (wdl.enumopts) = {
			extendable: false
		};

		POWER_SOURCE_CONDITION_UNSPECIFIED    = 0;
		POWER_SOURCE_CONDITION_NOMINAL        = 1; ///< The power source condition is operating normally and no intervention or attention is required.
		POWER_SOURCE_CONDITION_CRITICAL       = 2; ///< The power source condition is operating in a manner warranting intervention or attention.
	}

	/**
	 *  This represents, as an enumeration, the participation of the
	 *  source in supplying power for the system.
	 */
	enum PowerSourceStatus {
		option (wdl.enumopts) = {
			extendable: false
		};

		POWER_SOURCE_STATUS_UNSPECIFIED       = 0;
		POWER_SOURCE_STATUS_ACTIVE            = 1; ///< The power source is being actively used to power the system.
		POWER_SOURCE_STATUS_STANDBY           = 2; ///< The power source is available for use to power the system but is not actively being used to do so.
		POWER_SOURCE_STATUS_INACTIVE          = 3; ///< The power source is not available for use to power the system.
	}

        // ----------- PROPERTIES ----------- //

        option (wdl.properties) = {
                writable: READ_ONLY,
                variability: DYNAMIC,
                extendable: true,
                reserved_tag_min: 1,
                reserved_tag_max: 31
        };

        /**
         *  This is a required property representing an indication of
         *  the type or class of power source for the trait instance
         *  published by the resource.
         *
         *  This should be identical the type specified in the
         *  analagous Power Source Capabilities instance for this
         *  power source.
         *
         */
        weave.trait.power.PowerSourceCapabilitiesTrait.PowerSourceType         type               = 1;

        /**
         *  This optional property is to indicate either a measured or
         *  estimated value of the instantaneous voltage of a power
         *  supply.
         *
         *  A measurement may be made with any number of metrology
         *  techniques. However, the value may also be estimated based
         *  on system operating states.
         *
         *  Absence of this property implies that this device resource
         *  does not make any assessment of voltage and the value is
         *  unknown. A NULL value implies that the device may make an
         *  assessment of voltage; however, is unable to transiently
         *  provide one and the value is presently unknown.
         *
         */
        google.protobuf.FloatValue                                                                  assessed_voltage   = 2 [(wdl.prop) = { optional: true,
                                                                                                                      nullable: true,
                                                                                                                      quantity_type: VOLTAGE,
                                                                                                                      number_constraints: { min: 0.0, max: 700.0,
                                                                                                                      precision: 0.001,
                                                                                                                      fixed_encoding_width: 32 }},
                                                                                                       (wdl.tlv)  = { encoding: FIXED } ];

        /**
         *  This optional property is to indicate either a measured or
         *  estimated value of the instantaneous current of a power
         *  supply.
         *
         *  A measurement may be made with any number of metrology
         *  techniques. However, the value may also be estimated based
         *  on system operating states.
         *
         *  Absence of this property implies that this device resource
         *  does not make any assessment of current and the value is
         *  unknown. A NULL value implies that the device may make an
         *  assessment of current; however, is unable to transiently
         *  provide one and the value is presently unknown.
         *
         */
        google.protobuf.FloatValue                                                                  assessed_current   = 3 [(wdl.prop) = { optional: true,
                                                                                                                      nullable: true,
                                                                                                                      quantity_type: CURRENT,
                                                                                                                      number_constraints: { min: 0.0, max: 1000.0,
                                                                                                                      precision: 0.001,
                                                                                                                      fixed_encoding_width: 32 }},
                                                                                                       (wdl.tlv)  = { encoding: FIXED } ];

        /**
         *  This optional property represents the measured or
         *  estimated value of the instantaneous frequency of an AC
         *  current type power source.
         *
         *  Absence of this property implies that this device resource
         *  does not make any assessment of frequency and the value is
         *  unknown. A NULL value implies that the device may make an
         *  assessment of frequency; however, is unable to transiently
         *  provide one and the value is presently unknown.
         *
         */
        google.protobuf.FloatValue                                                                  assessed_frequency = 4 [(wdl.prop) = { optional: true,
                                                                                                                      nullable: true,
                                                                                                                      quantity_type: FREQUENCY,
                                                                                                                      number_constraints: { min: 0.0, max: 60.0,
                                                                                                                      precision: 1,
                                                                                                                      fixed_encoding_width: 16 }},
                                                                                                       (wdl.tlv)  = { encoding: FIXED } ];

        /**
         *  This property represents as an enumeration the condition
         *  of the power source and, in particular, whether it is
         *  operating normally and requires no intervention or
         *  attention or warrants intervention or attention.
         *
         *  This property may be used, for example, to support the
         *  localization of user interfaces and resource management
         *  event warnings. Consider a battery power source rendered
         *  to a user interface. So long as the charge level of the
         *  battery does not warrant user attention, its status is
         *  'Nominal' and its user interface rendering is such that it
         *  does not demand attention. However, when the battery
         *  reaches a charge level, say 10% or 20% remaining of its
         *  capacity, the status changes to 'Critical' and the user
         *  interface rendering changes to indicate attention is required.
         *
         */
        PowerSourceCondition                                                   condition          = 5;

        /**
         *  This property represents, as an enumeration, the
         *  participation of the source in supplying power for the
         *  system.
         *
         */
        PowerSourceStatus                                                      status             = 6;

        /**
         *  This property indicates whether a removable power source
         *  is present.
         *
         */
        bool                                                                   present            = 7;

        // ----------- EVENTS ----------- //
        message PowerSourceChangedEvent {
                option (wdl.message_type) = EVENT;
                option (wdl.event) = {
                    id: 1,
                    event_importance: EVENT_IMPORTANCE_PRODUCTION_STANDARD,
                    extendable: true,
                    reserved_tag_min: 1,
                    reserved_tag_max: 15
                 };

            /**
             *  This property represents as an enumeration the condition
             *  of the power source and, in particular, whether it is
             *  operating normally and requires no intervention or
             *  attention or warrants intervention or attention.
             *
             *  This property may be used, for example, to support the
             *  localization of user interfaces and resource management
             *  event warnings. Consider a battery power source rendered
             *  to a user interface. So long as the charge level of the
             *  battery does not warrant user attention, its status is
             *  'Nominal' and its user interface rendering is such that it
             *  does not demand attention. However, when the battery
             *  reaches a charge level, say 10% or 20% remaining of its
             *  capacity, the status changes to 'Critical' and the user
             *  interface rendering changes to indicate attention is required.
             *
             */
            PowerSourceCondition                condition          = 1;

            /**
             *  This property represents, as an enumeration, the
             *  participation of the source in supplying power for the
             *  system.
             *
             */
            PowerSourceStatus                   status             = 2;

        }

}







