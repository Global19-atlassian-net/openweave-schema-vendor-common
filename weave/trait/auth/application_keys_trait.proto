/*
 *
 *    Copyright (c) 2019 Google LLC.
 *    Copyright (c) 2016-2018 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      This file specifies a Weave Common trait for holding a
 *      resource's Weave application keys as distributed the Keys
 *      Manager service resource.
 *
 */

syntax = "proto3";

package weave.trait.auth;

import "google/protobuf/timestamp.proto";
import "wdl/wdl_options.proto";

option java_outer_classname = "WeaveInternalApplicationKeysTrait";
option objc_class_prefix = "SCM";

/**
 * ApplicationKeys Trait
 * For holding a device's application keys as distributed by
 * the Keys Manager Service.
 */
message ApplicationKeysTrait {
  option (wdl.message_type) = TRAIT;
  option (wdl.trait) = {
    stability: PROD,
    id: 0x001D,
    vendor_id: 0x0000,
    version: 1
  };


  /**
   * Epoch keys provide a means for limiting the lifetime of derived application keys.
   * They also provide a way for the service to revoke access to nodes that have been explicitly
   * excluded from an application group (albeit after a period of time).
   * Epoch keys are generated by the service and stored on a per-structure basis in the service data store.
   * Multiple epoch keys can exist per structure, up to a limit of 8. In general, however, only
   * two such keys will exist at any one point in time, an ‘old’ key and a ‘new’ key.
   */
  message EpochKey {
    /**
     * The service assigns a unique 3-bit epoch key id which identifies the key within the scope
     * of the structure. As new epoch keys are generated they are assigned new ids in monotonic order (modulo 8).
     */
    uint32 key_id = 1 [(wdl.prop) = {uint_constraints: {max: 7}}];

    /// the time at which nodes should begin using the key
    google.protobuf.Timestamp start_time = 2;

    /// the key, random 256-bit value
    bytes key = 3;
  }

  /**
   * Application master keys govern membership in an application group.
   * An application master key is a 256-bit random value generated and stored
   * by the service on a per-structure basis.  Within each structure a unique
   * application master key exists for each application group that is active
   * in that structure.
   */
  message ApplicationMasterKey {
    /**
     * Application groups are identified by an application group global id (AGGID).
     * Application group global ids are 32-bit integer values composed of a Nest assigned
     * vendor id and a vendor-specific group number.  Vendors are expected to assign AGGIDs
     * such that no two application groups have the same global id.
     */
    uint32 application_group_global_id = 1;

    /**
     * Application groups can also be identified by an application group short id (AGSID)
     * which is a 7 bit integer that uniquely identifies an application group within the
     * context of a single structure.  Application group short ids provide a compact
     * representation of application groups that is suitable for use in key ids.
     * AGSID are assigned by the Nest service, either automatically or by operator policy.
     * Because of this AGSID are not guaranteed to be the same across structures.
     */
    uint32 application_group_short_id = 2 [(wdl.prop) = {uint_constraints: {max: 127}}];

    /// the key, random 256-bit value
    bytes key = 3;
  }


  // ----------- PROPERTIES ----------- //
  option (wdl.properties) = {
    writable: READ_ONLY
  };

  repeated EpochKey epoch_keys = 1;
  repeated ApplicationMasterKey master_keys = 2;
}
